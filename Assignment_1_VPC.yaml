AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  VpcCidr:
    Default: 10.0.0.0/20
    Type: String

  PublicSubnet1CIDR:
    Default: 10.0.0.0/24
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.4.0/24
    Type: String

  PrivateSubnet1CIDR:
    Default: 10.0.8.0/24
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.0.12.0/24
    Type: String

  # InstanceType:
  #   Description: Webserver EC2 instance type
  #   Type: String
  #   Defualt: t2.mirco
  #   AllowedValues:
  #     - t1.micro
  #     - t2.nano
  #     - t2.micro
  #   ConstrainDescription: must be a valid EC2

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/((\d{1,2}))'
    ConstraintDescription: Must be a valid cidr range x.x.x.x/x
    Default: 0.0.0.0/0
    MaxLength: '18'
    MinLength: '9'
    Type: String

Resources:
#VPC
  VPCL00170144:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/20
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Assignment VPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: Assignment IGW     

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPCL00170144
      InternetGatewayId: !Ref InternetGateway

#Subnets
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPCL00170144  
      AvailabilityZone: !Select [ 0, !GetAZs '' ]      
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnet1CIDR

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPCL00170144
      AvailabilityZone: !Select [ 1, !GetAZs '' ]      
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnet2CIDR

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPCL00170144
      AvailabilityZone: !Select [ 0, !GetAZs '' ]      
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PrivateSubnet1CIDR

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPCL00170144
      AvailabilityZone: !Select [ 1, !GetAZs '' ]      
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PrivateSubnet2CIDR

#Public route table
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPCL00170144

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# #Private route table
#   PrivateRouteTable:
#     Type: 'AWS::EC2::RouteTable'
#     Properties:
#       VpcId: !Ref VPCL00170144

#   PrivateSubnet1RouteTableAssociation:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       RouteTableId: !Ref PrivateRouteTable
#       SubnetId: !Ref PrivateSubnet1

#   PrivateSubnet2RouteTableAssociation:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       RouteTableId: !Ref PrivateRouteTable
#       SubnetId: !Ref PrivateSubnet2

# 
  # AppInstance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     AvailabilityZone: !Select [ 0, !GetAZs '' ]   
  #     ImageId: ami-09d3b3274b6c5d4aa
  #     InstanceType: t2.mirco

#Securitygroup

  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: SSH Security Group
      VpcId: !Ref VPCL00170144

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Web Server Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: WebServer Security Group
      VpcId: !Ref VPCL00170144

  DataBaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open databse for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: DataBase Security Group
      VpcId: !Ref VPCL00170144
        

Outputs:
  VPC:
    Description: VPC ID
    Export: 
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPCL00170144
  
  PublicSubnet1:
    Description: Public Subnet 1 ID
    Export: 
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2 ID
    Export: 
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Export: 
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Export: 
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
    Value: !Ref PrivateSubnet2

  SSHSecurityGroup:
    Description: SSH Security Group ID
    Export: 
      Name: !Sub ${AWS::StackName}-SSHSecurityGroup
    Value: !Ref SSHSecurityGroup

  DataBaseSecurityGroup:
    Description: DataBase Security Group ID
    Export: 
      Name: !Sub ${AWS::StackName}-DataBaseSecurityGroup
    Value: !Ref DataBaseSecurityGroup
